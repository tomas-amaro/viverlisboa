name: Build and Deploy to Cloudflare Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  repository_dispatch:
    types: [sanity-content-update]

jobs:
  discover-domains:
    runs-on: ubuntu-latest
    outputs:
      domains: ${{ steps.discover.outputs.domains }}
      domain-configs: ${{ steps.discover.outputs.domain-configs }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup pnpm
      uses: pnpm/action-setup@v3
      with:
        version: 8.15.1

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.10.0'
        cache: 'pnpm'

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Discover domains from Sanity
      id: discover
      env:
        NEXT_PUBLIC_SANITY_PROJECT_ID: ${{ vars.NEXT_PUBLIC_SANITY_PROJECT_ID }}
        NEXT_PUBLIC_SANITY_DATASET: ${{ vars.NEXT_PUBLIC_SANITY_DATASET }}
        NEXT_PUBLIC_SANITY_API_VERSION: ${{ vars.NEXT_PUBLIC_SANITY_API_VERSION }}
        SANITY_API_TOKEN: ${{ secrets.SANITY_API_TOKEN }}
      run: |
        echo "🔍 Discovering domains from Sanity..."
        DISCOVERY_OUTPUT=$(node scripts/discover-domains.js --json 2>/dev/null)
        DOMAINS=$(echo "$DISCOVERY_OUTPUT" | jq -c '.domains')
        DOMAIN_CONFIGS=$(echo "$DISCOVERY_OUTPUT" | jq -c '.domainConfigs')
        
        echo "domains=$DOMAINS" >> $GITHUB_OUTPUT
        echo "domain-configs=$DOMAIN_CONFIGS" >> $GITHUB_OUTPUT
        
        echo "Found domains: $DOMAINS"

  build-and-deploy:
    needs: discover-domains
    runs-on: ubuntu-latest
    if: ${{ fromJson(needs.discover-domains.outputs.domains)[0] }}
    strategy:
      matrix:
        domain: ${{ fromJson(needs.discover-domains.outputs.domains) }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup pnpm
      uses: pnpm/action-setup@v3
      with:
        version: 8.15.1

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.10.0'
        cache: 'pnpm'

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Install Wrangler
      run: pnpm add -g wrangler

    - name: Type check
      run: pnpm type-check

    - name: Lint
      run: pnpm lint

    - name: Build static export for domain
      env:
        CAMPAIGN_DOMAIN: ${{ matrix.domain }}
        NODE_ENV: production
        NEXT_BUILD_TYPE: static
        NEXT_PUBLIC_SANITY_PROJECT_ID: ${{ vars.NEXT_PUBLIC_SANITY_PROJECT_ID }}
        NEXT_PUBLIC_SANITY_DATASET: ${{ vars.NEXT_PUBLIC_SANITY_DATASET }}
        NEXT_PUBLIC_SANITY_API_VERSION: ${{ vars.NEXT_PUBLIC_SANITY_API_VERSION }}
        SANITY_API_TOKEN: ${{ secrets.SANITY_API_TOKEN }}
      run: pnpm build

    - name: Deploy to Cloudflare Pages
      env:
        CAMPAIGN_DOMAIN: ${{ matrix.domain }}
        NODE_ENV: production
        NEXT_PUBLIC_SANITY_PROJECT_ID: ${{ vars.NEXT_PUBLIC_SANITY_PROJECT_ID }}
        NEXT_PUBLIC_SANITY_DATASET: ${{ vars.NEXT_PUBLIC_SANITY_DATASET }}
        NEXT_PUBLIC_SANITY_API_VERSION: ${{ vars.NEXT_PUBLIC_SANITY_API_VERSION }}
        SANITY_API_TOKEN: ${{ secrets.SANITY_API_TOKEN }}
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        CLOUDFLARE_ACCOUNT_ID: ${{ vars.CLOUDFLARE_ACCOUNT_ID }}
      run: node scripts/deploy-cloudflare.js ${{ matrix.domain }} production

  deploy-studio:
    runs-on: ubuntu-latest
    # Only deploy studio on main branch pushes (not PRs)
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup pnpm
      uses: pnpm/action-setup@v3
      with:
        version: 8.15.1

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.10.0'
        cache: 'pnpm'

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Deploy Sanity Studio
      env:
        SANITY_AUTH_TOKEN: ${{ secrets.SANITY_API_TOKEN }}
        NEXT_PUBLIC_SANITY_PROJECT_ID: ${{ vars.NEXT_PUBLIC_SANITY_PROJECT_ID }}
        NEXT_PUBLIC_SANITY_DATASET: ${{ vars.NEXT_PUBLIC_SANITY_DATASET }}
        NEXT_PUBLIC_SANITY_API_VERSION: ${{ vars.NEXT_PUBLIC_SANITY_API_VERSION }}
      run: pnpm sanity:deploy

  deploy-webhook:
    runs-on: ubuntu-latest
    # Only deploy webhook on main branch pushes when webhook-worker.js changes
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 2  # Need to compare with previous commit

    - name: Check for webhook changes
      id: webhook-changes
      run: |
        # Check for changes in webhook-related files
        WEBHOOK_FILES=(
          "webhook-worker.js"
          "scripts/deploy-webhook.js"
          "package.json"
        )
        
        CHANGED_FILES=$(git diff --name-only HEAD^ HEAD)
        WEBHOOK_CHANGED=false
        
        echo "📋 Files changed in this commit:"
        echo "$CHANGED_FILES"
        echo ""
        
        for file in "${WEBHOOK_FILES[@]}"; do
          if echo "$CHANGED_FILES" | grep -q "^${file}$"; then
            echo "🔄 Webhook-related file changed: $file"
            WEBHOOK_CHANGED=true
          fi
        done
        
        if [ "$WEBHOOK_CHANGED" = true ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "✅ Webhook-related files have changes, will deploy worker"
        else
          echo "changed=false" >> $GITHUB_OUTPUT
          echo "✅ No webhook-related changes, skipping worker deployment"
        fi

    - name: Setup pnpm
      if: steps.webhook-changes.outputs.changed == 'true'
      uses: pnpm/action-setup@v3
      with:
        version: 8.15.1

    - name: Setup Node.js
      if: steps.webhook-changes.outputs.changed == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: '20.10.0'
        cache: 'pnpm'

    - name: Install dependencies
      if: steps.webhook-changes.outputs.changed == 'true'
      run: pnpm install --frozen-lockfile

    - name: Deploy Webhook Worker
      if: steps.webhook-changes.outputs.changed == 'true'
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        CLOUDFLARE_ACCOUNT_ID: ${{ vars.CLOUDFLARE_ACCOUNT_ID }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_ACTOR: ${{ github.actor }}
        GITHUB_REPOSITORY: ${{ github.repository }}
      run: pnpm webhook:deploy


